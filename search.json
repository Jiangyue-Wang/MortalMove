[{"path":"http://www.jiangyue-wang.github.io/MortalMove/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Jiangyue Wang Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://www.jiangyue-wang.github.io/MortalMove/articles/fit-model-cmdstan.html","id":"simulating-data","dir":"Articles","previous_headings":"","what":"Simulating data","title":"Fitting a model using cmdstanr","text":"","code":"sim <- simulate_data(n_animals = 100, n_fixes = 200, n_dead = 20, n_knots = 25) sim[[\"raw_data\"]] <- NULL sim[[\"ind_cell_effect\"]] <- 0"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/articles/fit-model-cmdstan.html","id":"fit-stan-model-using-cmdstan","dir":"Articles","previous_headings":"","what":"Fit stan model using cmdstan","title":"Fitting a model using cmdstanr","text":"","code":"model_file <- system.file(\"stan/mortality_model.stan\", package = \"MortalMove\") mod <- cmdstan_model(model_file, exe_file = system.file(\"stan/mortality_model.exe\", package = \"MortalMove\")) fit <- mod$sample(   data = sim,   chains = 2,   parallel_chains = 2,   iter_warmup = 500,   iter_sampling = 1500,   seed = 123 )"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/articles/fit-model-cmdstan.html","id":"check-diagnostics","dir":"Articles","previous_headings":"","what":"Check diagnostics","title":"Fitting a model using cmdstanr","text":"","code":"diagnostic_fit(fit, plot = TRUE, observed_y = rowSums(sim$time_step, na.rm = TRUE), delta = sim$delta) #> This is posterior version 1.6.1 #>  #> Attaching package: 'posterior' #> The following object is masked from 'package:FNN': #>  #>     entropy #> The following objects are masked from 'package:stats': #>  #>     mad, sd, var #> The following objects are masked from 'package:base': #>  #>     %in%, match #> This is bayesplot version 1.14.0 #> - Online documentation and vignettes at mc-stan.org/bayesplot #> - bayesplot theme set to bayesplot::theme_default() #>    * Does _not_ affect other ggplot2 plots #>    * See ?bayesplot_theme_set for details on theme setting #>  #> Attaching package: 'bayesplot' #> The following object is masked from 'package:posterior': #>  #>     rhat #> This is loo version 2.8.0 #> - Online documentation and vignettes at mc-stan.org/loo #> - As of v2.0.0 loo defaults to 1 core but we recommend using as many as possible. Use the 'cores' argument or set options(mc.cores = NUM_CORES) for an entire session. #> # A tibble: 5 × 5 #>   variable    mean      sd      q5      q95 #>   <chr>      <dbl>   <dbl>   <dbl>    <dbl> #> 1 beta[1]   0.143  0.0508   0.0624  0.230   #> 2 beta[2]  -0.0228 0.421   -0.734   0.651   #> 3 alpha[1] -0.0146 0.00362 -0.0205 -0.00865 #> 4 alpha[2]  0.176  0.0828   0.0424  0.317   #> 5 llambda  -2.27   1.61    -4.92    0.329   #>  #> --- Rhat and ESS Summary --- #> # A tibble: 5 × 4 #>   variable  rhat ess_bulk ess_tail #>   <chr>    <dbl>    <dbl>    <dbl> #> 1 beta[1]  1.00     2065.    1799. #> 2 beta[2]  1.00     1725.    1577. #> 3 alpha[1] 1.000    2202.    1880. #> 4 alpha[2] 1.00     2153.    1706. #> 5 llambda  1.00     2160.    1913. #>  #> Computed from 3000 by 100 log-likelihood matrix. #>  #>          Estimate   SE #> elpd_loo   -139.7 25.6 #> p_loo         2.8  0.6 #> looic       279.4 51.3 #> ------ #> MCSE of elpd_loo is 0.0. #> MCSE and ESS estimates assume independent draws (r_eff=1). #>  #> All Pareto k estimates are good (k < 0.7). #> See help('pareto-k-diagnostic') for details. #>  #> Posterior predictive p-value summary: #>   variable p_value #> 1   Failed  0.3000 #> 2 Censored  0.7625 bayesplot::mcmc_trace(fit$draws(c(\"llambda\",\"alpha\",\"beta\")))"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/articles/fit-model-cmdstan.html","id":"fit-with-spatial-autocorrelation","dir":"Articles","previous_headings":"","what":"Fit with spatial autocorrelation","title":"Fitting a model using cmdstanr","text":"","code":"# Fit with spatial autocorrelation sim[[\"ind_cell_effect\"]] <- 1 model_file <- system.file(\"stan/mortality_model.stan\", package = \"MortalMove\") mod <- cmdstan_model(model_file, exe_file = system.file(\"stan/mortality_model.exe\", package = \"MortalMove\"))  # run fewer iterations due to time constraint fit_spat <- mod$sample(   data = sim,   chains = 2,   parallel_chains = 2,   iter_warmup = 50,   iter_sampling = 150,   seed = 123 ) diagnostic_fit(fit_spat, plot = TRUE, observed_y = rowSums(sim$time_step, na.rm = TRUE), delta = sim$delta) #> # A tibble: 5 × 5 #>   variable    mean      sd      q5     q95 #>   <chr>      <dbl>   <dbl>   <dbl>   <dbl> #> 1 beta[1]   0.139  0.0564   0.0536  0.243  #> 2 beta[2]   0.0363 0.424   -0.608   0.728  #> 3 alpha[1] -0.0185 0.00333 -0.0233 -0.0126 #> 4 alpha[2]  0.214  0.118    0.0100  0.403  #> 5 llambda  -0.881  1.22    -3.18    0.828  #>  #> --- Rhat and ESS Summary --- #> # A tibble: 5 × 4 #>   variable  rhat ess_bulk ess_tail #>   <chr>    <dbl>    <dbl>    <dbl> #> 1 beta[1]   1.02   389.      138.  #> 2 beta[2]   1.12    14.5      29.0 #> 3 alpha[1]  1.25     6.49     19.5 #> 4 alpha[2]  1.04    30.7      80.4 #> 5 llambda   1.75     3.33     15.0 #>  #> Computed from 300 by 100 log-likelihood matrix. #>  #>          Estimate   SE #> elpd_loo   -137.5 25.4 #> p_loo         8.5  1.8 #> looic       274.9 50.9 #> ------ #> MCSE of elpd_loo is 0.2. #> MCSE and ESS estimates assume independent draws (r_eff=1). #>  #> All Pareto k estimates are good (k < 0.6). #> See help('pareto-k-diagnostic') for details. #>  #> Posterior predictive p-value summary: #>   variable p_value #> 1   Failed  0.3000 #> 2 Censored  0.7625 bayesplot::mcmc_trace(fit_spat$draws(c(\"llambda\",\"alpha\",\"beta\")))"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/articles/prepare-data-for-stan.html","id":"required-data-structure","dir":"Articles","previous_headings":"","what":"Required data structure","title":"Get movement tracking datasets ready for modeling, fit the model using cmdstanr or rstan","text":"probably two data frames: one GPS fixes timestamps one individual information (e.g., age, sex, fate, etc.). first one following columns: animal_id: unique identifier individual timestamp: date-time GPS fix (converted lubridate::ymd_hms() format, numeric format seconds) x: x-coordinate (meters) y: y-coordinate (meters) habitat covariates want include. Please note want use categorical variables (e.g., 4 season), input variables independent columns (e.g., season_spring, season_summer, season_autumn, winter reference level), column binary variable indicating presence season. values numeric. , included prey availability (prey_avail) hunter density (hunter) habitat covariates. second one following columns: - animal_id: unique identifier individual - fate: fate individual (e.g., 0 alive, 1 dead) - habitat covariates want include. Please note want use categorical variables (e.g., sex), input variables independent columns (e.g., `sex_male’, 1 male, 0 female). values numeric. , included age sex individual covariates.","code":"head(df) #>           x         y animal_id timestamp prey_avail       hunter #> 1 992.94402 583.03060         1         1   448.6998 1.930454e-03 #> 2 253.09899 165.02589         1         2   585.7532 2.273980e-18 #> 3  49.53844  96.30111         1         3   471.9762 3.723363e-25 #> 4 686.32495 428.61309         1         4   401.6691 4.393693e-02 #> 5 786.92735 355.76157         1         5   524.8925 3.726653e-06 #> 6 353.60608 844.93354         1         6   477.7169 1.637377e-07 head(indv) #>   age sex_m animal_id fate #> 1  16     0         1    0 #> 2  20     0         2    0 #> 3   6     0         3    0 #> 4  11     0         4    0 #> 5   8     1         5    0 #> 6   7     0         6    0"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/articles/prepare-data-for-stan.html","id":"prepare-data-for-modeling","dir":"Articles","previous_headings":"","what":"Prepare data for modeling","title":"Get movement tracking datasets ready for modeling, fit the model using cmdstanr or rstan","text":"First, need integrate two tables one data frame, used modeling. dplyr::left_join() function . , need change column name fate delta. Next, prepare data modeling. prepare_data_for_stan() function . can specify habitat covariates individual covariates want include model, well whether want include cell effect (.e., random effect grid cell). can also specify grid bounds resolution want include cell effect. grid bounds specified list xmin, xmax, ymin, ymax values, grid resolution specified meters. Please note grid bounds cover entire area data collected, difference xmax xmin, ymax ymin divisible grid resolution.","code":"df <- left_join(df, indv, by = \"animal_id\") df <- df %>%    dplyr::rename(delta = fate) head(df) #>           x         y animal_id timestamp prey_avail       hunter age sex_m #> 1 992.94402 583.03060         1         1   448.6998 1.930454e-03  16     0 #> 2 253.09899 165.02589         1         2   585.7532 2.273980e-18  16     0 #> 3  49.53844  96.30111         1         3   471.9762 3.723363e-25  16     0 #> 4 686.32495 428.61309         1         4   401.6691 4.393693e-02  16     0 #> 5 786.92735 355.76157         1         5   524.8925 3.726653e-06  16     0 #> 6 353.60608 844.93354         1         6   477.7169 1.637377e-07  16     0 #>   delta #> 1     0 #> 2     0 #> 3     0 #> 4     0 #> 5     0 #> 6     0 df_stan_data <- prepare_stan_data(   df = df,   include_hab_cov = TRUE, include_ind_cov = TRUE,   hab_cov_names = c(\"hunter\", \"prey_avail\"),   ind_cov_names = c(\"age\", \"sex_m\"),   include_cell_effect = TRUE,   grid_bounds = list(xmin = 0, xmax = 1000, ymin = 0, ymax = 1000),   grid_res = 100 ) #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union names(df_stan_data) #>  [1] \"n\"               \"max_locs\"        \"n_locs\"          \"time_step\"       #>  [5] \"delta\"           \"n_knots\"         \"knots_ce\"        \"sigma\"           #>  [9] \"rho\"             \"cell_mat\"        \"ind_cell_effect\" \"beta_prior\"      #> [13] \"llambda_prior\"   \"alpha_prior\"     \"num_hab_covs\"    \"hab_cov\"         #> [17] \"num_indv_covs\"   \"z\""},{"path":"http://www.jiangyue-wang.github.io/MortalMove/articles/prepare-data-for-stan.html","id":"fit-model-using-cmdstanr","dir":"Articles","previous_headings":"","what":"Fit model using cmdstanr","title":"Get movement tracking datasets ready for modeling, fit the model using cmdstanr or rstan","text":"generally faster fit model using cmdstanr rstan, requires bit compilation running. can install cmdstanr GitHub, set path CmdStan installation directory using set_cmdstan_path(). can specify number chains, iterations, parameters needed.","code":"library(cmdstanr) set_cmdstan_path(\"YOUR_CMD_PATH\") model_file <- system.file(\"stan/mortality_model.stan\", package = \"MortalMove\") mod <- cmdstan_model(model_file, exe_file = system.file(\"stan/mortality_model.exe\", package = \"MortalMove\")) fit <- mod$sample(   data = df_stan_data,   chains = 2,   parallel_chains = 2,   iter_warmup = 50,   iter_sampling = 150,   seed = 123 )"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/articles/prepare-data-for-stan.html","id":"fit-model-using-rstan","dir":"Articles","previous_headings":"","what":"Fit model using rstan","title":"Get movement tracking datasets ready for modeling, fit the model using cmdstanr or rstan","text":"prefer use rstan, can well. ’s much simpler install, may take longer fit cmdstanr, especially complicated models spatial effects.","code":"library(rstan) model_file <- system.file(\"stan/mortality_model.stan\", package = \"MortalMove\") fit <- stan(   file = model_file,   data = df_stan_data,   chains = 2,   iter = 200,   warmup = 50,   seed = 123 )"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/articles/simulating-data.html","id":"simulate-a-dataset","dir":"Articles","previous_headings":"","what":"Simulate a dataset","title":"Simulating Animal Movement and Mortality Data","text":"","code":"sim <- simulate_data(n_animals = 100, n_fixes = 200, n_dead = 20, n_knots = 25) str(sim, max.level = 1) #> List of 19 #>  $ n              : num 100 #>  $ max_locs       : num 200 #>  $ n_locs         : num [1:100] 48 194 111 23 195 137 177 61 39 31 ... #>  $ time_step      : num [1:100, 1:200] 1 1 1 1 1 1 1 1 1 1 ... #>  $ delta          : num [1:100(1d)] 0 0 0 0 0 0 1 0 0 0 ... #>   ..- attr(*, \"dimnames\")=List of 1 #>  $ n_knots        : num 25 #>  $ knots_ce       : num [1:25, 1:2] 100 300 500 700 900 100 300 500 700 900 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ sigma          : num 1 #>  $ rho            : num 100 #>  $ cell_mat       : num [1:100, 1:200] 8 6 7 2 6 6 20 6 3 7 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ ind_cell_effect: num 1 #>  $ beta_prior     : num [1:2] 0 1 #>  $ llambda_prior  : num [1:2] 0 2 #>  $ alpha_prior    : num [1:2] 0 1 #>  $ num_hab_covs   : num 2 #>  $ hab_cov        : num [1:100, 1:200, 1:2] 5.18 4.88 5.23 5.86 4.88 ... #>  $ num_indv_covs  : num 2 #>  $ z              : num [1:100, 1:2] 16 20 6 11 8 7 20 17 18 17 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ raw_data       :'data.frame': 10957 obs. of  9 variables:"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/articles/simulating-data.html","id":"plot-out-simulated-dataset---individual-monitoring-length-and-fate","dir":"Articles","previous_headings":"","what":"Plot out simulated dataset - individual monitoring length and fate","title":"Simulating Animal Movement and Mortality Data","text":"","code":"df <- data.frame(id = 1:sim$n, n_locs  = sim$n_locs, delta = sim$delta)  ggplot(df, aes(x = id, y = n_locs)) +   geom_point(aes(color = delta)) +   geom_segment(aes(xend = id, yend = 0, color = delta)) +   labs(x = \"Animal ID\", y = \"Time steps\") +   theme_minimal() +   ggtitle(\"Monitoring length and fate of each animal\") +   theme(axis.text.x = element_text(angle = 90, hjust = 1)) +   coord_flip()"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/articles/simulating-data.html","id":"plot-out-simulated-dataset---individual-movement-paths","dir":"Articles","previous_headings":"","what":"Plot out simulated dataset - individual movement paths","title":"Simulating Animal Movement and Mortality Data","text":"","code":"df <- sim$raw_data df <- df[df$animal_id %in% c(1,13),] ggplot(df, aes(x = x, y = y, color = delta)) +   geom_path() +   geom_point() +   labs(x = \"X Coordinate\", y = \"Y Coordinate\") +   theme_minimal() +   ggtitle(\"Movement paths of animals\")"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/articles/simulating-data.html","id":"plot-some-covariates-by-fate","dir":"Articles","previous_headings":"","what":"Plot some covariates by fate","title":"Simulating Animal Movement and Mortality Data","text":"","code":"df <- sim$raw_data df$delta <- as.factor(df$delta) ggplot(df, aes(x = delta, y = hunter)) +   geom_boxplot() +   labs(x = \"Fate\", y = \"Hunter density\") +   theme_minimal() +   ggtitle(\"Hunter covariate by fate of animal\") +   scale_y_continuous(limits = c(0, 10)) ggplot(df, aes(x = delta, y = prey_avail)) +   geom_boxplot() +   labs(x = \"Fate\", y = \"Prey availability\") +   theme_minimal() +   ggtitle(\"Prey covariate by fate of animal\")"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jiangyue Wang. Author, maintainer.","code":""},{"path":"http://www.jiangyue-wang.github.io/MortalMove/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang J (2025). MortalMove: Estimate Animal Mortality Risk Movement Data. R package version 0.1.0, https://github.com/Jiangyue-Wang/MortalMove.","code":"@Manual{,   title = {MortalMove: Estimate Animal Mortality Risk from Movement Data},   author = {Jiangyue Wang},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/Jiangyue-Wang/MortalMove}, }"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/index.html","id":"mortalmove","dir":"","previous_headings":"","what":"Estimate Animal Mortality Risk from Movement Data","title":"Estimate Animal Mortality Risk from Movement Data","text":"goal MortalMove estimate mortality risk animals based movement data individual characteristics, accounting spatial effects. provides functions prepare data modeling, fit models using Stan, visualize diagnostics.","code":""},{"path":"http://www.jiangyue-wang.github.io/MortalMove/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimate Animal Mortality Risk from Movement Data","text":"can install development version MortalMove GitHub :","code":"# install.packages(\"pak\") pak::pak(\"Jiangyue-Wang/MortalMove\")"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/reference/diagnostic_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Diagnostics on CmdStan Fit — diagnostic_fit","title":"Perform Diagnostics on CmdStan Fit — diagnostic_fit","text":"Perform Diagnostics CmdStan Fit","code":""},{"path":"http://www.jiangyue-wang.github.io/MortalMove/reference/diagnostic_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Diagnostics on CmdStan Fit — diagnostic_fit","text":"","code":"diagnostic_fit(fit, plot = TRUE, observed_y = NULL, delta = NULL)"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/reference/diagnostic_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Diagnostics on CmdStan Fit — diagnostic_fit","text":"fit CmdStanMCMC object returned cmdstanr::sample() plot Logical; whether show diagnostic plots observed_y Optional vector observed values predictive p-value computed, survey/survival length individual delta Optional vector censoring indicators (0 = censored, 1 = dead/failed) predictive p-value computed","code":""},{"path":"http://www.jiangyue-wang.github.io/MortalMove/reference/diagnostic_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Diagnostics on CmdStan Fit — diagnostic_fit","text":"Invisible list diagnostics","code":""},{"path":"http://www.jiangyue-wang.github.io/MortalMove/reference/prepare_stan_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Stan Data from Real Tracking Dataset — prepare_stan_data","title":"Prepare Stan Data from Real Tracking Dataset — prepare_stan_data","text":"Prepare Stan Data Real Tracking Dataset","code":""},{"path":"http://www.jiangyue-wang.github.io/MortalMove/reference/prepare_stan_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Stan Data from Real Tracking Dataset — prepare_stan_data","text":"","code":"prepare_stan_data(   df,   include_hab_cov = TRUE,   include_ind_cov = TRUE,   hab_cov_names = c(\"prey_avail\", \"hunter\"),   ind_cov_names = c(\"age\", \"sex_m\"),   include_cell_effect = TRUE,   grid_bounds = NULL,   grid_res = NULL )"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/reference/prepare_stan_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Stan Data from Real Tracking Dataset — prepare_stan_data","text":"df data.frame containing GPS points columns: x, y, animal_id, user-specified covariates include_hab_cov Logical; whether include habitat covariates include_ind_cov Logical; whether include individual-level covariates hab_cov_names Character vector habitat covariate column names ind_cov_names Character vector individual-level covariate column names include_cell_effect Logical; whether include spatial cell effect grid_bounds Named list xmin, xmax, ymin, ymax (required include_cell_effect = TRUE) grid_res Grid resolution meters (required include_cell_effect = TRUE), please make sure grid bounds divisible grid resolution","code":""},{"path":"http://www.jiangyue-wang.github.io/MortalMove/reference/prepare_stan_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Stan Data from Real Tracking Dataset — prepare_stan_data","text":"named list ready passed CmdStan model","code":""},{"path":"http://www.jiangyue-wang.github.io/MortalMove/reference/simulate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Animal Movement and Mortality Data — simulate_data","title":"Simulate Animal Movement and Mortality Data — simulate_data","text":"Simulate Animal Movement Mortality Data","code":""},{"path":"http://www.jiangyue-wang.github.io/MortalMove/reference/simulate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Animal Movement and Mortality Data — simulate_data","text":"","code":"simulate_data(   n_animals = 200,   n_fixes = 1000,   n_dead = 40,   n_knots = 100,   landscape_size = 1000 )"},{"path":"http://www.jiangyue-wang.github.io/MortalMove/reference/simulate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Animal Movement and Mortality Data — simulate_data","text":"n_animals Number animals simulate n_fixes Maximum GPS fixes per animal n_dead Number dead animals (must squared number) n_knots Number spatial grid cells landscape_size Size landscape (meters)","code":""},{"path":"http://www.jiangyue-wang.github.io/MortalMove/reference/simulate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Animal Movement and Mortality Data — simulate_data","text":"list containing inputs Stan model","code":""}]
